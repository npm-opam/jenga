
This example shows how to setup jenga to read rules from a
configuration file in a simple make-style format, and in addition we
setup multiple build directories using the same jengaroot.ml


The source for the hello example is contained in the hello subdir
along with a make.conf specifying its dependencies.  A 2nd example is
contained in other, with its own different make.conf.


The make.conf in each subdir defines rules using a very simplistic
syntax of header/command line-pairs.

The jengaroot.ml parses the make.conf file and constructs rules via the
Jenga_lib API. It selects all targets found in make.conf to be build
by .DEFAULT. The rule generation phase is dependant on make.conf - the
rules will automatically reconfigure if that file changes.

Also we define .DEFAULT to recusively build .DEFAULT in all subdirs;
Starting jenga in a subdir will just build that part of the tree.


One bit of trickiness: Jenga must not use the normal generation scheme
when checking if there is a rule to build "make.conf", or else it will
discover a dependency cycle. This is avoided in the env setup, with:
    "make.conf", None
to declare that filenames with the pattern are always source files.
