<**/*.ml{,i}>: warn(-40), no_alias_deps
<**/*>: thread
# This prevents the implicit addition of -ppx options by ocamlfind
<**/*>: predicate(custom_ppx)
<lib/*.ml>: for-pack(Jenga_lib)
<tenacious/lib/*.ml>: for-pack(Tenacious_lib)
<bin/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-drop -bench-drop -inline-test-lib fake_for_drop)
<lib/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-drop -bench-drop -inline-test-lib fake_for_drop)
<tenacious/lib/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-drop -bench-drop -inline-test-lib fake_for_drop)
<**/*_standalone.native>: linkall
<lib/*>: ugly_hack_to_workaround_ocamlbuild_nightmare
# OASIS_START
# DO NOT EDIT (digest: e1ccc3a4a11abc679932d2e72a2f2bc7)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library tenacious_lib
"tenacious/lib/tenacious_lib.cmxs": use_tenacious_lib
"tenacious/lib/dlist.cmx": for-pack(Tenacious_lib)
"tenacious/lib/graph.cmx": for-pack(Tenacious_lib)
"tenacious/lib/heart.cmx": for-pack(Tenacious_lib)
"tenacious/lib/heart_intf.cmx": for-pack(Tenacious_lib)
"tenacious/lib/heart_unit_tests.cmx": for-pack(Tenacious_lib)
"tenacious/lib/list_utils.cmx": for-pack(Tenacious_lib)
"tenacious/lib/ring.cmx": for-pack(Tenacious_lib)
"tenacious/lib/ring_unit_tests.cmx": for-pack(Tenacious_lib)
"tenacious/lib/tenacious.cmx": for-pack(Tenacious_lib)
"tenacious/lib/tenacious_intf.cmx": for-pack(Tenacious_lib)
"tenacious/lib/tenacious_unit_tests.cmx": for-pack(Tenacious_lib)
"tenacious/lib/weak_ref.cmx": for-pack(Tenacious_lib)
<tenacious/lib/*.ml{,i,y}>: package(async)
<tenacious/lib/*.ml{,i,y}>: package(bin_prot)
<tenacious/lib/*.ml{,i,y}>: package(core)
<tenacious/lib/*.ml{,i,y}>: package(fieldslib)
<tenacious/lib/*.ml{,i,y}>: package(ppx_assert.runtime-lib)
<tenacious/lib/*.ml{,i,y}>: package(ppx_bench.runtime-lib)
<tenacious/lib/*.ml{,i,y}>: package(ppx_expect.collector)
<tenacious/lib/*.ml{,i,y}>: package(ppx_inline_test.runtime-lib)
<tenacious/lib/*.ml{,i,y}>: package(sexplib)
<tenacious/lib/*.ml{,i,y}>: package(typerep)
<tenacious/lib/*.ml{,i,y}>: package(variantslib)
# Library jenga_lib
"lib/jenga_lib.cmxs": use_jenga_lib
"lib/action.cmx": for-pack(Jenga_lib)
"lib/action_sandbox.cmx": for-pack(Jenga_lib)
"lib/alias.cmx": for-pack(Jenga_lib)
"lib/api.cmx": for-pack(Jenga_lib)
"lib/artifact_policy.cmx": for-pack(Jenga_lib)
"lib/build.cmx": for-pack(Jenga_lib)
"lib/cat_api.cmx": for-pack(Jenga_lib)
"lib/cmd_build.cmx": for-pack(Jenga_lib)
"lib/cmd_cat_api.cmx": for-pack(Jenga_lib)
"lib/cmd_db.cmx": for-pack(Jenga_lib)
"lib/cmd_diagnostics.cmx": for-pack(Jenga_lib)
"lib/cmd_env.cmx": for-pack(Jenga_lib)
"lib/cmd_monitor.cmx": for-pack(Jenga_lib)
"lib/cmd_stop.cmx": for-pack(Jenga_lib)
"lib/config.cmx": for-pack(Jenga_lib)
"lib/db.cmx": for-pack(Jenga_lib)
"lib/dep.cmx": for-pack(Jenga_lib)
"lib/dep_type.cmx": for-pack(Jenga_lib)
"lib/effort.cmx": for-pack(Jenga_lib)
"lib/env.cmx": for-pack(Jenga_lib)
"lib/error_reason_type.cmx": for-pack(Jenga_lib)
"lib/exit_code.cmx": for-pack(Jenga_lib)
"lib/file_access.cmx": for-pack(Jenga_lib)
"lib/finish_time_estimator.cmx": for-pack(Jenga_lib)
"lib/forker.cmx": for-pack(Jenga_lib)
"lib/fs.cmx": for-pack(Jenga_lib)
"lib/gen_key.cmx": for-pack(Jenga_lib)
"lib/glob_to_re.cmx": for-pack(Jenga_lib)
"lib/glob_unit_tests.cmx": for-pack(Jenga_lib)
"lib/goal.cmx": for-pack(Jenga_lib)
"lib/interning.cmx": for-pack(Jenga_lib)
"lib/jenga_client.cmx": for-pack(Jenga_lib)
"lib/jenga_options.cmx": for-pack(Jenga_lib)
"lib/jenga_root_interface.cmx": for-pack(Jenga_lib)
"lib/job.cmx": for-pack(Jenga_lib)
"lib/job_summary.cmx": for-pack(Jenga_lib)
"lib/load_root.cmx": for-pack(Jenga_lib)
"lib/locking.cmx": for-pack(Jenga_lib)
"lib/message.cmx": for-pack(Jenga_lib)
"lib/misc.cmx": for-pack(Jenga_lib)
"lib/path.cmx": for-pack(Jenga_lib)
"lib/pattern.cmx": for-pack(Jenga_lib)
"lib/persist.cmx": for-pack(Jenga_lib)
"lib/progress.cmx": for-pack(Jenga_lib)
"lib/quit.cmx": for-pack(Jenga_lib)
"lib/reason.cmx": for-pack(Jenga_lib)
"lib/reflect.cmx": for-pack(Jenga_lib)
"lib/reflected.cmx": for-pack(Jenga_lib)
"lib/rpc_intf.cmx": for-pack(Jenga_lib)
"lib/rpc_server.cmx": for-pack(Jenga_lib)
"lib/rule.cmx": for-pack(Jenga_lib)
"lib/ruleset.cmx": for-pack(Jenga_lib)
"lib/run.cmx": for-pack(Jenga_lib)
"lib/run_reason.cmx": for-pack(Jenga_lib)
"lib/save_description.cmx": for-pack(Jenga_lib)
"lib/scheme.cmx": for-pack(Jenga_lib)
"lib/scheme_type.cmx": for-pack(Jenga_lib)
"lib/server_lock.cmx": for-pack(Jenga_lib)
"lib/special_paths.cmx": for-pack(Jenga_lib)
"lib/system.cmx": for-pack(Jenga_lib)
"lib/tenacious.cmx": for-pack(Jenga_lib)
"lib/var.cmx": for-pack(Jenga_lib)
<lib/jenga_lib.{cma,cmxa}>: use_libjenga_lib_stubs
<lib/*.ml{,i,y}>: package(async)
<lib/*.ml{,i,y}>: package(async_inotify)
<lib/*.ml{,i,y}>: package(async_parallel)
<lib/*.ml{,i,y}>: package(bin_prot)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(fieldslib)
<lib/*.ml{,i,y}>: package(ocaml_plugin)
<lib/*.ml{,i,y}>: package(ppx_assert.runtime-lib)
<lib/*.ml{,i,y}>: package(ppx_bench.runtime-lib)
<lib/*.ml{,i,y}>: package(ppx_expect.collector)
<lib/*.ml{,i,y}>: package(ppx_inline_test.runtime-lib)
<lib/*.ml{,i,y}>: package(re2)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(typerep)
<lib/*.ml{,i,y}>: package(variantslib)
<lib/*.ml{,i,y}>: use_tenacious_lib
"lib/batched_mtimes_stubs.c": package(async)
"lib/batched_mtimes_stubs.c": package(async_inotify)
"lib/batched_mtimes_stubs.c": package(async_parallel)
"lib/batched_mtimes_stubs.c": package(bin_prot)
"lib/batched_mtimes_stubs.c": package(core)
"lib/batched_mtimes_stubs.c": package(fieldslib)
"lib/batched_mtimes_stubs.c": package(ocaml_plugin)
"lib/batched_mtimes_stubs.c": package(ppx_assert.runtime-lib)
"lib/batched_mtimes_stubs.c": package(ppx_bench.runtime-lib)
"lib/batched_mtimes_stubs.c": package(ppx_expect.collector)
"lib/batched_mtimes_stubs.c": package(ppx_inline_test.runtime-lib)
"lib/batched_mtimes_stubs.c": package(re2)
"lib/batched_mtimes_stubs.c": package(sexplib)
"lib/batched_mtimes_stubs.c": package(str)
"lib/batched_mtimes_stubs.c": package(typerep)
"lib/batched_mtimes_stubs.c": package(variantslib)
"lib/batched_mtimes_stubs.c": use_tenacious_lib
"lib/digest_stubs.c": package(async)
"lib/digest_stubs.c": package(async_inotify)
"lib/digest_stubs.c": package(async_parallel)
"lib/digest_stubs.c": package(bin_prot)
"lib/digest_stubs.c": package(core)
"lib/digest_stubs.c": package(fieldslib)
"lib/digest_stubs.c": package(ocaml_plugin)
"lib/digest_stubs.c": package(ppx_assert.runtime-lib)
"lib/digest_stubs.c": package(ppx_bench.runtime-lib)
"lib/digest_stubs.c": package(ppx_expect.collector)
"lib/digest_stubs.c": package(ppx_inline_test.runtime-lib)
"lib/digest_stubs.c": package(re2)
"lib/digest_stubs.c": package(sexplib)
"lib/digest_stubs.c": package(str)
"lib/digest_stubs.c": package(typerep)
"lib/digest_stubs.c": package(variantslib)
"lib/digest_stubs.c": use_tenacious_lib
# Executable jenga
<bin/jenga.{native,byte}>: package(async)
<bin/jenga.{native,byte}>: package(async_inotify)
<bin/jenga.{native,byte}>: package(async_parallel)
<bin/jenga.{native,byte}>: package(bin_prot)
<bin/jenga.{native,byte}>: package(core)
<bin/jenga.{native,byte}>: package(fieldslib)
<bin/jenga.{native,byte}>: package(ocaml_plugin)
<bin/jenga.{native,byte}>: package(ppx_assert.runtime-lib)
<bin/jenga.{native,byte}>: package(ppx_bench.runtime-lib)
<bin/jenga.{native,byte}>: package(ppx_expect.collector)
<bin/jenga.{native,byte}>: package(ppx_inline_test.runtime-lib)
<bin/jenga.{native,byte}>: package(re2)
<bin/jenga.{native,byte}>: package(sexplib)
<bin/jenga.{native,byte}>: package(str)
<bin/jenga.{native,byte}>: package(typerep)
<bin/jenga.{native,byte}>: package(variantslib)
<bin/jenga.{native,byte}>: use_jenga_lib
<bin/jenga.{native,byte}>: use_tenacious_lib
<bin/*.ml{,i,y}>: package(async)
<bin/*.ml{,i,y}>: package(async_inotify)
<bin/*.ml{,i,y}>: package(async_parallel)
<bin/*.ml{,i,y}>: package(bin_prot)
<bin/*.ml{,i,y}>: package(core)
<bin/*.ml{,i,y}>: package(fieldslib)
<bin/*.ml{,i,y}>: package(ocaml_plugin)
<bin/*.ml{,i,y}>: package(ppx_assert.runtime-lib)
<bin/*.ml{,i,y}>: package(ppx_bench.runtime-lib)
<bin/*.ml{,i,y}>: package(ppx_expect.collector)
<bin/*.ml{,i,y}>: package(ppx_inline_test.runtime-lib)
<bin/*.ml{,i,y}>: package(re2)
<bin/*.ml{,i,y}>: package(sexplib)
<bin/*.ml{,i,y}>: package(str)
<bin/*.ml{,i,y}>: package(typerep)
<bin/*.ml{,i,y}>: package(variantslib)
<bin/*.ml{,i,y}>: use_jenga_lib
<bin/*.ml{,i,y}>: use_tenacious_lib
# OASIS_STOP
